/*
 * Empty C++ Application
 */

#include <stdio.h>
#include "define.h"
#include "xaxidma.h"
#include "xdohist.h"
#include "xdohiststretch.h"
#include "LenaOnCode.h"
#include "AxiTimerHelper.h"

// Get a pointer to the TX and RX dma buffer (CONFIGURE DMA)
// The pointers are for 8-bit memory but their addresses are 32 bit (u32)
unsigned char *m_dma_buffer_TX = (unsigned char *)TX_BUFFER_BASE;
unsigned char *m_dma_buffer_RX = (unsigned char *)RX_BUFFER_BASE;

// Variables
unsigned int  hist_sw[PIXEL_RANGE];
unsigned char imgOut[IMG_WIDTH * IMG_HEIGHT];
unsigned char imgIn_HW[IMG_WIDTH * IMG_HEIGHT];

// Address of BRAM controller in memory
unsigned int *hist_hw = (unsigned int *)0x40000000;

XAxiDma axiDma;
int initDMA() {
  XAxiDma_Config *CfgPtr;

  CfgPtr = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
  XAxiDma_CfgInitialize(&axiDma, CfgPtr);

  // Disable interrupts
  XAxiDma_IntrDisable(&axiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
  XAxiDma_IntrDisable(&axiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

  return XST_SUCCESS;
}

XDohist doHist;
XDohiststretch doHistStretch;

// Do histogram using IP Block implementation
int initDoHist() {
  int status;

  XDohist_Config *doHist_cfg;

  doHist_cfg = XDohist_LookupConfig(XPAR_DOHIST_0_DEVICE_ID);

  if (!doHist_cfg) {
    printf("Error loading config for doHist_cfg\n");
  }
  status = XDohist_CfgInitialize(&doHist, doHist_cfg);

  if (status != XST_SUCCESS) {
    printf("Error initializing for doHist\n");
  }
  return status;
}

// Do histogram stretching using IP Block implementation
int initDoHistStretch() {
  int status;

  XDohiststretch_Config *doHistStretch_cfg;

  doHistStretch_cfg =
    XDohiststretch_LookupConfig(XPAR_DOHISTSTRETCH_0_DEVICE_ID);

  if (!doHistStretch_cfg) {
    printf("Error loading config for doHistStretch_cfg\n");
  }
  status = XDohiststretch_CfgInitialize(&doHistStretch, doHistStretch_cfg);

  if (status != XST_SUCCESS) {
    printf("Error initializing for doHistStretch\n");
  }

  return status;
}

// Do histogram - Software version
void doHistSW(unsigned char *img, unsigned int *hist) {
  // Reset histogram
  for (int idx = 0; idx < PIXEL_RANGE; idx++) {
    hist[idx] = 0;
  }

  // Calculate the histogram
  for (int idxImg = 0; idxImg < (IMG_WIDTH * IMG_HEIGHT); idxImg++) {
    hist[img[idxImg]] = hist[img[idxImg]] + 1;
  }
}

// Do histogram stretching - Software version
void doHistStretchSW(unsigned char *imgIn,
                     unsigned char *imgOut,
                     unsigned char  xMin,
                     unsigned char  xMax) {
  float xMax_minus_xMin = xMax - xMin;

  for (int idxImg = 0; idxImg < (IMG_WIDTH * IMG_HEIGHT); idxImg++) {
    // Calculate the histogram stretch (calculate in float then convert to
    // 8-bit)
    float y_t_float = ((imgIn[idxImg] - xMin) / (xMax_minus_xMin)) *
                      (PIXEL_RANGE - 1);
    imgOut[idxImg] = y_t_float;
  }
}

int main()
{
  initDMA();
  initDoHist();
  initDoHistStretch();
  AxiTimerHelper axiTimer;

  printf("Doing histogram on SW\n");
  axiTimer.startTimer();
  doHistSW(img, hist_sw);
  axiTimer.stopTimer();
  double hist_SW_elapsed = axiTimer.getElapsedTimerInSeconds();
  printf("Histogram SW execution time: %f sec\n", hist_SW_elapsed);

  // Get min value
  unsigned char xMin;

  for (int idxMin = 0; idxMin < PIXEL_RANGE; idxMin++) {
    xMin = idxMin;

    if (hist_sw[idxMin]) break;
  }

  // Get max value
  unsigned char xMax;

  for (int idxMax = PIXEL_RANGE - 1; idxMax >= 0; idxMax--) {
    xMax = idxMax;

    if (hist_sw[idxMax]) break;
  }
  printf("(SW) xMin=%d xMax=%d\n", xMin, xMax);

  printf("Doing histogram stretching\n");
  axiTimer.startTimer();
  doHistStretchSW(img, imgOut, xMin, xMax);
  axiTimer.stopTimer();

  // Sum the elapsed time
  double histStretch_SW_elapsed = axiTimer.getElapsedTimerInSeconds();
  printf("Histogram stretch SW execution time: %f sec\n", histStretch_SW_elapsed);

  // Nox doing on hardware

  // Populate data (get image from header and put on memory)
  for (int idx = 0; idx < (IMG_WIDTH * IMG_HEIGHT); idx++) {
    imgIn_HW[idx] = img[idx];
  }

  XDohist_Start(&doHist);

  // At this point we don't care on the result of the stretch algorithm because
  // we're still getting the histogram
  XDohiststretch_Set_xMax(&doHistStretch, PIXEL_RANGE - 1);
  XDohiststretch_Set_xMin(&doHistStretch, 0);
  XDohiststretch_Start(&doHistStretch);

  axiTimer.startTimer();
  Xil_DCacheFlushRange((u32)imgIn_HW,
                       IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));
  Xil_DCacheFlushRange((u32)m_dma_buffer_RX,
                       IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));

  XAxiDma_SimpleTransfer(&axiDma,
                         (u32)imgIn_HW,
                         IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char),
                         XAXIDMA_DMA_TO_DEVICE);
  XAxiDma_SimpleTransfer(&axiDma,
                         (u32)m_dma_buffer_RX,
                         IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char),
                         XAXIDMA_DEVICE_TO_DMA);

  // Wait transfers to finish
  while (XAxiDma_Busy(&axiDma, XAXIDMA_DMA_TO_DEVICE)) ;

  while (XAxiDma_Busy(&axiDma, XAXIDMA_DEVICE_TO_DMA)) ;

  // Invalidate the cache to avoid reading garbage
  Xil_DCacheInvalidateRange((u32)m_dma_buffer_RX,
                            IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));
  axiTimer.stopTimer();
  double hist_HW_elapsed = axiTimer.getElapsedTimerInSeconds();
  printf("Histogram HW execution time: %f sec\n", hist_HW_elapsed);

  // Get min value
  for (int idxMin = 0; idxMin < PIXEL_RANGE; idxMin++) {
    xMin = idxMin;

    if (hist_hw[idxMin]) break;
  }

  // Get min value
  for (int idxMax = PIXEL_RANGE - 1; idxMax >= 0; idxMax--) {
    xMax = idxMax;

    if (hist_hw[idxMax]) break;
  }
  printf("(HW) xMin=%d xMax=%d\n", xMin, xMax);

  // Now do the histogram stretching
  XDohist_Start(&doHist);

  // Now we pass the xMax and xMin values
  XDohiststretch_Set_xMax(&doHistStretch, xMax);
  XDohiststretch_Set_xMin(&doHistStretch, xMin);
  xDohiststretch_Start(&DoHistStretch);

  axiTimer.startTimer();
  Xil_DCacheFlushRange((u32)imgIn_HW,
                       IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));
  Xil_DCacheFlushRange((u32)m_dma_buffer_RX,
                       IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));

  XAxiDma_SimpleTransfer(&axiDma,
                         (u32)imgIn_HW,
                         IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char),
                         XAXIDMA_DMA_TO_DEVICE);
  XAxiDma_SimpleTransfer(&axiDma,
                         (u32)m_dma_buffer_RX,
                         IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char),
                         XAXIDMA_DEVICE_TO_DMA);

  // Wait transfers to finish
  while (XAxiDma_Busy(&axiDma, XAXIDMA_DMA_TO_DEVICE)) ;

  while (XAxiDma_Busy(&axiDma, XAXIDMA_DEVICE_TO_DMA)) ;

  // Invalidate the cache to avoid reading garbage
  Xil_DCacheInvalidateRange((u32)m_dma_buffer_RX,
                            IMG_WIDTH * IMG_HEIGHT * sizeof(unsigned char));
  axiTimer.stopTimer();
  double histStretch_HW_elapsed = axiTimer.getElapsedTimerInSeconds();
  printf("Histogram stretching HW execution time: %f sec\n",
         histStretch_HW_elapsed);
  double TotalSW = (hist_SW_elapsed + histStretch_SW_elapsed);
  double TotalHW = (hist_HW_elapsed + histStretch_HW_elapsed);
  printf("Time summary SW:%f HW:%f ratio:%f\n",
                                    TotalSW,
         TotalHW,
         TotalHW / TotalSW);
  printf("DMA out address: 0x%X\n", m_dma_buffer_RX);
  bool imgMismatch = FALSE;

  for (int idxComp = 0; idxComp < (IMG_WIDTH * IMG_HEIGHT); idxComp++) {
    if (imgOut[idxComp] != m_dma_buffer_RX[idxComp]) {
      printf("Invalid response\n");
      imgMismatch = TRUE;
    }
  }

  if (!imgMismatch) {
    printf("SW and HW images are the same\n");
  }

  return 0;
}
